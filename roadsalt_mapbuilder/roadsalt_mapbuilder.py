# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RoadSaltMap
                                 A QGIS plugin
 cria mapas que dÃ£o apoio ao estudo de impaco causado pela despejo de sal nas estradas
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-05-07
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Lais Baroni UERJ
        email                : laisrbaroni@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QDate, Qt
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog, QMessageBox
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .roadsalt_mapbuilder_dialog import RoadSaltMapDialog
from .roadsalt import method_1, method_2
from datetime import date, datetime
import os.path, csv


class RoadSaltMap:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(self.plugin_dir, 'i18n', 'RoadSaltMap_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Road Salt Map Builder')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RoadSaltMap', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/roadsalt_mapbuilder/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'&Road Salt Map Builder'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Road Salt Map Builder'),
                action)
            self.iface.removeToolBarIcon(action)
#map 1
    def select_outputmap1_file(self):
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, 
                            "Select output file name","", '*.shp')
        self.dlg.l_outMap1.setText(filename)

    def select_basin1_file(self):
        filename, _filter = QFileDialog.getOpenFileName(self.dlg, 
                            "Select basin file ","", '*.shp')
        self.dlg.l_inBasin_1.setText(filename)
        self.dlg.l_inBasin_2.setText(filename)

    def select_road1_file(self):
        filename, _filter = QFileDialog.getOpenFileName(self.dlg, 
                            "Select road file ","", '*.shp')
        self.dlg.l_inRoad_1.setText(filename)
        self.dlg.l_inRoad_2.setText(filename)

#map 2
    def select_outputmap2_file(self):
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, 
                            "Select output file ","", '*.shp')
        self.dlg.l_outMap2.setText(filename)

    def select_basin2_file(self):
        filename, _filter = QFileDialog.getOpenFileName(self.dlg, 
                            "Select basin file ","", '*.shp')
        self.dlg.l_inBasin_1.setText(filename)
        self.dlg.l_inBasin_2.setText(filename)

    def select_road2_file(self):
        filename, _filter = QFileDialog.getOpenFileName(self.dlg, 
                            "Select road file ","", '*.shp')
        self.dlg.l_inRoad_1.setText(filename)
        self.dlg.l_inRoad_2.setText(filename)

    def set_combobox_fields(self, filename, combobox, isDate = True):
        combobox.clear()
        sampleField = -1
        with open(filename) as csvfile:
#            dialect = csv.Sniffer().sniff(csvfile.read(1024))#TESTAR
#            csvfile.seek(0)
            reader = csv.DictReader(csvfile,delimiter=";")
            fields = reader.fieldnames
            for line in reader:
                for idx, field in enumerate(fields):
                    try:
                        if isDate:
                            datetime.strptime(line[field], '%Y-%m-%d')
                        else:
                            float(line[field])
                        sampleField = idx
                        break
                    except ValueError:
                        pass
                if sampleField > -1:
                    combobox.addItems(fields)
                    combobox.setCurrentIndex(idx)
                else:
                    if isDate:
                        QMessageBox.critical(combobox, "Format error",
                        "File has no date collumn with valid format (YYYY-MM-DD).")
                    else:
                        QMessageBox.critical(combobox, "Format error",
                        "File has no numeric values.")
                break
        return sampleField > -1

    def set_date_intervals(self, filename, index, startE, endE):
        with open(filename) as csvfile:
#            dialect = csv.Sniffer().sniff(csvfile.read(1024))#TESTAR
#            csvfile.seek(0)
            reader = csv.reader(csvfile,delimiter=";")
            dates = []
            for i,line in enumerate(reader):
                if i == 0:
                    continue 
                try:
                    date = datetime.strptime(line[index], '%Y-%m-%d')
                    dates.append(date)
                except ValueError:
                    QMessageBox.critical(None, "Format error",
                    "File has no valid date at line %d." % (i+1))
                    break
            minDate, maxDate = str(min(dates).date()), str(max(dates).date())
            startE.setDateRange(QDate.fromString(minDate,Qt.ISODate),
                                QDate.fromString(maxDate,Qt.ISODate))
            startE.setDate(QDate.fromString(minDate,Qt.ISODate))
            endE.setDateRange(QDate.fromString(minDate,Qt.ISODate), 
                              QDate.fromString(maxDate,Qt.ISODate))
            endE.setDate(QDate.fromString(maxDate,Qt.ISODate))

    def change_interval(self):
        filename = self.dlg.l_inSalt.text()
        self.set_date_intervals(filename,self.dlg.cb_colDate.currentIndex(),
                                self.dlg.de_starttime,self.dlg.de_endtime)

    def select_salt_file(self):
        filename, _filter = QFileDialog.getOpenFileName(self.dlg, 
                            "Select salt file ","", '*.csv')
        self.dlg.l_inSalt.setText(filename)
        if self.set_combobox_fields(filename,self.dlg.cb_colDate):
            self.set_date_intervals(filename,self.dlg.cb_colDate.currentIndex(),
                                    self.dlg.de_starttime,self.dlg.de_endtime)
        self.set_combobox_fields(filename,self.dlg.cb_colSalt,isDate=False)
#to do: pensar em criar o arquivo csvt associado ao csv

    def run_method_1(self):
        arq_bacias = self.dlg.l_inBasin_1.text()
        if arq_bacias == "" or QgsVectorLayer(arq_bacias, "").geometryType() != 2:
            return QMessageBox.information(None, "Error (basins file):", "Please select a polygon or a multipolygon type file")
        arq_estradas = self.dlg.l_inRoad_1.text()
        if arq_estradas == "" or QgsVectorLayer(arq_estradas, "").geometryType() != 1:
            return QMessageBox.information(None, "Error 'roads file':", "Please select a line or a polyline type file" ) 
        arq_entrada = {"street" : arq_estradas, "basin" : arq_bacias}
        tam_buffer = self.dlg.sb_BufferLen.value()
        if tam_buffer == 0:
            return QMessageBox.information(None, "Error (Buffer length):", "Please choose a buffer length" )
        unit=""
        if self.dlg.op_m.isChecked() == True:
            unit = "m"
        if self.dlg.op_km.isChecked() == True:
            unit = "km"
        if self.dlg.op_mile.isChecked() == True:
            unit = "mile"
        if unit == "":
            return QMessageBox.information(None, "Error (Unit):", "Please select a unit" ) 
        arq_saida = self.dlg.l_outMap1.text()
        if arq_saida == "":
            return QMessageBox.information(None, "Error (Output):", "Please set a output file") 
        dir_trabalho = os.path.dirname(arq_saida)
        opcoes = {"buffer" : tam_buffer, "unit" : unit, "iface": self.iface}
        method_1(dir_trabalho, arq_entrada, arq_saida, opcoes)

    def run_method_2(self):
        arq_bacias = self.dlg.l_inBasin_2.text()
        if arq_bacias == "" or QgsVectorLayer(arq_bacias, "").geometryType() != 2:
            return QMessageBox.information(None, "Error (basins file):", "Please select a polygon or a multipolygon type file")
        arq_estradas = self.dlg.l_inRoad_2.text()
        if arq_estradas == "" or QgsVectorLayer(arq_estradas, "").geometryType() != 1:
            return QMessageBox.information(None, "Error 'roads file':", "Please select a line or a polyline type file" ) 
        arq_sal = self.dlg.l_inSalt.text()
        if arq_sal == "":
            return QMessageBox.information(None, "Error (salt file):", "Please select a valid csv file") 
        length=""
        if self.dlg.op_galmile.isChecked() == True:
            length = "galmile"
        if self.dlg.op_literkm.isChecked() == True:
            length = "literkm"
        if self.dlg.op_tonmile.isChecked() == True:
            length = "tonmile"
        if self.dlg.op_kgkm.isChecked() == True:
            length = "kgkm"
        if length == "":
            return QMessageBox.information(None, "Error (Unit):", "Please select a unit" ) 
        arq_entrada = {"street" : arq_estradas, "basin" : arq_bacias, "salt" : arq_sal}
        arq_saida = self.dlg.l_outMap2.text()
        if arq_saida == "":
            return QMessageBox.information(None, "Error (Output):", "Please set a output file")
        dir_trabalho = os.path.dirname(arq_saida)
        t0 = datetime.strptime(self.dlg.de_starttime.date().toString(Qt.ISODate), '%Y-%m-%d')
        t1 = datetime.strptime(self.dlg.de_endtime.date().toString(Qt.ISODate), '%Y-%m-%d')
        if t0 == "" or t1 == "":
            return QMessageBox.information(None, "Error (Time interval):", "Please choose start and end dates")
        opcoes = {"valueIdx":self.dlg.cb_colSalt.currentIndex(),
		          "dateIdx":self.dlg.cb_colDate.currentIndex(), 
                  "t0":t0, "t1":t1, "length":length, "iface": self.iface}
        method_2(dir_trabalho, arq_entrada, arq_saida, opcoes)
#falta conferir os campos de data (start e end)
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = RoadSaltMapDialog()
            self.dlg.setWindowTitle("Road Salt Map Builder")
#map 1
            self.dlg.tb_outMap1.clicked.connect(self.select_outputmap1_file)
            self.dlg.tb_inBasin_1.clicked.connect(self.select_basin1_file)
            self.dlg.tb_inRoad_1.clicked.connect(self.select_road1_file)
            self.dlg.pb_ok_1.clicked.connect(self.run_method_1)
#map 2
            self.dlg.tb_outMap2.clicked.connect(self.select_outputmap2_file)
            self.dlg.tb_inBasin_2.clicked.connect(self.select_basin2_file)
            self.dlg.tb_inRoad_2.clicked.connect(self.select_road2_file)
            self.dlg.tb_inSalt.clicked.connect(self.select_salt_file)
            self.dlg.pb_ok_2.clicked.connect(self.run_method_2)
            self.dlg.cb_colDate.currentIndexChanged.connect(self.change_interval)

        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox and lineEdit from previous runs
#map 1
        self.dlg.l_outMap1.clear()
        self.dlg.l_inBasin_1.clear()
        self.dlg.l_inRoad_1.clear()
#map 2
        self.dlg.l_outMap2.clear()
        self.dlg.l_inBasin_2.clear()
        self.dlg.l_inRoad_2.clear()
        self.dlg.l_inSalt.clear()
        self.dlg.cb_colSalt.clear()
        self.dlg.cb_colDate.clear()
        self.dlg.de_starttime.clear()
        self.dlg.de_endtime.clear()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
